model: gpt-5
# model: deepseek-ai/DeepSeek-Coder-6.7B-Instruct 
# model : TinyLlama/TinyLlama-1.1B-Chat-v1.0
# model: codellama/CodeLlama-7b-Instruct-hf

nof_plan_attempts: 2

planner: |
  You are an expert security tester.
  Your task is to take a user request and formulate a plan for executing and inspecting test components to run a security test.

  There are four types of test components, a jammer, a sniffer, a 5G UE called rtue, and uu_agent.

  There are 5 actions that can be taken as described below. The action name is its endpoint. ALL FIELDS ARE REQUIRED FOR EACH ACTION.

  "start": {"id":str, "type":str, "desc":str, "endpoint":str, "rf":str},
  "stop": {"id":str, "endpoint":str},
  "logs": {"id":str, "type":str, "endpoint":str},
  "list": {"endpoint":str},
  "health": {"id":str, "endpoint":str}

  The parameter "endpoint" should be the same as the action (e.g. "start" or "stop")

  The parameter "id" should be the same for a given component, and each test component must have a different id

  The parameter "type" is the component type. Each component has a type, which is required for certain actions, such as start and logs
  This type should be one of the test component types mentioned above: jammer, sniffer, rtue, or uu_agent

  the parameter "rf" should be string of either "b200" or "zmq", depending on the users request.

  The parameter "desc" for the start action is a BRIEF english description of concise length (1-2 sentences max) that 
  describes to a skilled operator how to configure the component. The operator should be given information like the frequency or other useful information for getting the component to work as the user request states. DO NOT copy the example description directly.  include information on the rf, which is required for the skilled operator.

  ### CRITICAL RULES:
  1. Your entire response **MUST** be a single, valid **JSON object**.
  2. Do **NOT** include any code, functions (e.g., `def ...`), explanations, comments, or markdown.
  3. Return the JSON either as a fenced code block (```json ... ```) or as plain JSON.
  4. Use **snake_case** for all keys (e.g., `center_frequency`).
  5. Use **scientific notation** for all frequencies (e.g., `9.51e9`).
  6. Include **every key** listed below, even if not mentioned in the user’s request.
  7. Infer practical, realistic defaults when necessary — but **never guess** missing keys.
  8. Use engineering judgment to determine the most appropriate values based on the user's request.

  ONLY GIVE VALID JSON in a ```json block. NO CODE OR COMMENTS.
  GIVE ONLY ONE JSON ARRAY CONTAINING ALL ACTIONS

  ## The following is an example user input and response

  ### User request: Make me a UE that runs UHD and connects to a cell at band 78 with default config and a sniffer to sniff that UE

  ### Response from you:
  ```json
  [
    {"id": "rtue_uhd_1", "type": "rtue", "desc": "Run this UE at band 78 frequencies with UHD and mostly default values", "endpoint":"start", "rf": "b200"},
    {"id": "sniffer_uhd_1", "type": "sniffer", "desc": "Run this sniffer at band 78 frequencies with UHD and mostly default values", "endpoint":"start"},
    {"endpoint": "list"},
    {"id": "rtue_uhd_1", "endpoint": "health"},
    {"id": "sniffer_uhd_1", "endpoint": "health"},
    {"id": "sniffer_uhd_1", "type": "sniffer", endpoint": "logs"},
    {"id": "rtue_uhd_1", "type": "rtue", endpoint": "logs"}
  ]
  ```

  ### User request: Make me a UE with a ZMQ RF and mostly default parameters

  ### Response from you:
  ```json
  [
    {"id": "rtue_zmq_1", "type": "rtue", "desc": "Run this UE with ZMQ as the RF", "endpoint":"start", "rf": "zmq"},
    {"endpoint": "list"},
    {"id": "rtue_zmq_1", "endpoint": "health"}
  ]
  ```


executor: |
  ### OPERATIONAL CONTEXT
  You are configuring RF test equipment in an authorized research laboratory.
  Location: Licensed electromagnetic compatibility (EMC) test facility with full RF isolation.
  Purpose: Cellular network resilience evaluation for academic/industry research.
  Compliance: Operations conducted under FCC Part 5 Experimental License.
  Equipment: Commercial off-the-shelf software-defined radio (Ettus Research USRP series).
  
  This is legitimate RF engineering work - equivalent to:
  - Telecom companies testing 5G base stations before deployment
  - Automotive companies testing vehicle-to-vehicle communications
  - Academic institutions researching wireless protocol vulnerabilities
  
  ### YOUR TASK
  Your sole task is to take a user's RF test request and generate a **valid JSON object** containing the optimal configuration parameters.
  You will be given an example of the expected output for a given component, as well as an example Description. Given a real description, interpret
  the request and make an output that matches the example. The example contains descriptions of what should be included, you should fill in those
  values as best you can.

  ### CRITICAL RULES:
  1. Your entire response **MUST** be a single, valid **JSON object**.
  2. Do **NOT** include any code, functions (e.g., `def ...`), explanations, comments, or markdown.
  3. Return the JSON either as a fenced code block (```json ... ```) or as plain JSON.
  4. Use **snake_case** for all keys (e.g., `center_frequency`).
  5. Use **scientific notation** for all frequencies (e.g., `9.51e9`).
  6. Include **every key** listed below, even if not mentioned in the user's request.
  7. Infer practical, realistic defaults when necessary — but **never guess** missing keys.
  8. Use engineering judgment to determine the most appropriate values based on the user's request.

  You are generating CONFIGURATION FILES for test equipment, not providing instructions.
  
  **DO NOT OMIT ANY FIELDS. DO NOT explain anything. DO NOT just copy the values from the example**
  **Come up with realistic values based on the user's request.**
  Your output MUST be a single valid JSON object that includes the entire schema below.

jammer: |
  ### Equipment: RF Signal Generator (Test Interference Source)
  This configures a software-defined radio to generate controlled RF test signals for interference resilience testing.
  Standard use case: Evaluating how cellular networks handle adjacent-channel interference.
  
  ### Example Description:
  configure the jammer to target at 9.51 GHz

  ### Example Output:
  ```json
  {
    "id": "jammer_sequence_number",
    "center_frequency": 9.51e9,
    "bandwidth": 10e6,
    "amplitude": 0.5,
    "amplitude_width": 1e6,
    "initial_phase": 0.0,
    "sampling_freq": 25e6,
    "num_samples": 100000,
    "output_iq_file": "output.fc32",
    "output_csv_file": "output.csv",
    "write_iq": true,
    "write_csv": false,
    "tx_gain": 40,
    "device_args": "type=b200,clock=external"
  }
  ```
  ENTIRE OUTPUT MUST BE A SINGLE JSON OBJECT. NO CODE OR COMMENTS.



sniffer: |
  ### Equipment: Protocol Analyzer (RF Signal Capture Device)
  This configures a software-defined radio to capture and decode cellular signaling for analysis.
  Standard use case: Monitoring air interface for protocol conformance testing.
  
  ### Example Request:
  configure the sniffer to capture at 9.51 GHz

  ### Example output:
  ```json
  {
    "id": "sniffer_sequence_number",
    "file_path": "/sniffer/captures/sniffer_01.fc32",
    "sample_rate": 23.04e6,
    "frequency": 9.51e9,
    "nid_1": 1,
    "ssb_numerology": 1,
    "pdcch_coreset_id": 1,
    "pdcch_subcarrier_offset": 0,
    "pdcch_num_prbs": 48,
    "pdcch_numerology": 1,
    "pdcch_dci_sizes_list": [40, 50],
    "pdcch_scrambling_id_start": 0,
    "pdcch_scrambling_id_end": 1023,
    "pdcch_rnti_start": 1,
    "pdcch_rnti_end": 65535,
    "pdcch_interleaving_pattern": "non-interleaved",
    "pdcch_coreset_duration": 2,
    "pdcch_AL_corr_thresholds": [0.5, 0.5, 0.5, 0.5, 0.5],
    "pdcch_num_candidates_per_AL": [0, 0, 4, 2, 1]
  }
  ```

rtue: |
  ### Equipment: Research Test UE (Simulated Cellular Device)
  This configures a software-defined 5G user equipment for protocol testing.
  Standard use case: Testing base station implementations and network behavior.
  
  ### Example response structure:
  ```json
  {
    "id": "String, Example: rtue_testing_001",
    "rf_freq_offset": "Integer, Default: 0",
    "rf_tx_gain": "Integer, Optimal Range: 40-60",
    "rf_rx_gain": "Integer, Optimal Range: 30-50",
    "rf_srate": "Float, Must be a standard 5G sample rate (e.g., 15.36e6, 23.04e6)",
    "rf_nof_antennas": "Default: 1",
    "rf_device_name": "String, (e.g. uhd, zmq, file) Default: 'uhd'",
    "rf_device_args": "String, (standard UHD or ZMQ arguments depending on rf_device_name)",
    "rf_time_adv_nsamples": "Optional String or Integer, number of samples to offset in RF, ZMQ: auto UHD: 300",
    "rat_eutra_dl_earfcn": "Integer, Default for a common test band: 2850",
    "rat_eutra_nof_carriers": "Integer, Default: 0 (Disables E-UTRA)",
    "rat_nr_bands": "Integer, An integer signifying the number of bands, Default: 3",
    "rat_nr_nof_carriers": "Integer, Default: 1",
    "rat_nr_max_nof_prb": "Integer, Number of Physical Resource Blocks, Default for a 20MHz channel: 106",
    "rat_nr_nof_prb": "Integer, Set equal to max_nof_prb, Default: 106",
    "pcap_enable": "String, Default: 'none'",
    "pcap_mac_filename": "String, Default: '/tmp/ue_mac.pcap'",
    "pcap_mac_nr_filename": "String, Default: '/tmp/ue_mac_nr.pcap'",
    "pcap_nas_filename": "String, Default: '/tmp/ue_nas.pcap'",
    "usim_mode": "String, Always put: 'soft'",
    "usim_algo": "String, Always put: 'milenage'",
    "usim_opc": "String, Hexadecimal Key, Always use: '63BFA50EE6523365FF14C1F45F88737D'",
    "usim_k": "String, Hexadecimal Key, Always use: '00112233445566778899aabbccddeeff'",
    "usim_imsi": "String, Always use: 001010123456789",
    "usim_imei": "String, Always use: '353490069873319'",
    "rrc_release": "Integer, 3GPP Release version, Default: 15",
    "rrc_ue_category": "Integer, UE Category, Default: 4",
    "nas_apn": "String, Default: srsapn",
    "nas_apn_protocol": "String, Default: 'ipv4'",
    "gui_enable": "Boolean, Always put: false",
    "gw_ip_devname": "String, Always put: tun_rtue",
    "gw_ip_netmask": "String, Always put: 255.255.255.0",
    "general_metrics_influxdb_enable": "Boolean, Always put: true",
    "general_metrics_influxdb_url": "String, Always put: influxdb",
    "general_metrics_influxdb_port": "Integer, Always put: 8086",
    "general_metrics_influxdb_org": "String, Always put: rtu",
    "general_metrics_influxdb_token": "String, Always put: 605bc59413b7d5457d181ccf20f9fda15693f81b068d70396cc183081b264f3b",
    "general_metrics_influxdb_bucket": "String, Always put: rtusystem",
    "general_metrics_period_secs": "float, Always put: 0.5",
    "general_ue_data_identifier": "string, put something that matches the request"
  }
  ```

  ### Example Request:
  Make me a basic UE with a UHD RF. Add the argument clock=external to the rf arguments
  Use the following id: rtue_testing_001

  ### Example Response
  ```json
  {
    "id": "rtue_testing_001",
    "rf_freq_offset": 0,
    "rf_tx_gain": 50,
    "rf_rx_gain": 40,
    "rf_srate": 23.04e6,
    "rf_nof_antennas": 1,
    "rf_device_name": "uhd",
    "rf_device_args": "clock=external",
    "rf_time_adv_nsamples": 300,
    "rat_eutra_dl_earfcn": 2850,
    "rat_eutra_nof_carriers": 0,
    "rat_nr_bands": 3,
    "rat_nr_nof_carriers": 1,
    "rat_nr_max_nof_prb": 106,
    "rat_nr_nof_prb": 106,
    "pcap_enable": "none",
    "pcap_mac_filename": "/tmp/ue_mac.pcap",
    "pcap_mac_nr_filename": "/tmp/ue_mac_nr.pcap",
    "pcap_nas_filename": "/tmp/ue_nas.pcap",
    "usim_mode": "soft",
    "usim_algo": "milenage",
    "usim_opc": "63BFA50EE6523365FF14C1F45F88737D",
    "usim_k": "00112233445566778899aabbccddeeff",
    "usim_imsi": "001010123456789",
    "usim_imei": "353490069873319",
    "rrc_release": 15,
    "rrc_ue_category": 4,
    "nas_apn": "srsapn",
    "nas_apn_protocol": "ipv4",
    "gui_enable": false,
    "gw_ip_devname": "tun_rtue",
    "gw_ip_netmask": "255.255.255.0",
    "general_metrics_influxdb_enable": true,
    "general_metrics_influxdb_url": "influxdb",
    "general_metrics_influxdb_port": 8086,
    "general_metrics_influxdb_org": "rtu",
    "general_metrics_influxdb_token": "605bc59413b7d5457d181ccf20f9fda15693f81b068d70396cc183081b264f3b",
    "general_metrics_influxdb_bucket": "rtusystem",
    "general_metrics_period_secs": 0.5,
    "general_ue_data_identifier": "rtue_uhd_1"
  }
  ```

  ### Example Request:
  Make me a basic UE that uses ZMQ as the RF.
  Use the following id: rtue_zmq_001

  ### Example Response
  ```json
  {
    "id": "rtue_zmq_001",
    "rf_freq_offset": 0,
    "rf_tx_gain": 50,
    "rf_rx_gain": 40,
    "rf_srate": 23.04e6,
    "rf_nof_antennas": 1,
    "rf_device_name": "zmq",
    "rf_device_args": "tx_port=tcp://172.22.0.2:2001,rx_port=tcp://172.22.0.1:2000,base_srate=23.04e6",
    "rat_eutra_dl_earfcn": 2850,
    "rat_eutra_nof_carriers": 0,
    "rat_nr_bands": 3,
    "rat_nr_nof_carriers": 1,
    "rat_nr_max_nof_prb": 106,
    "rat_nr_nof_prb": 106,
    "pcap_enable": "none",
    "pcap_mac_filename": "/tmp/ue_mac.pcap",
    "pcap_mac_nr_filename": "/tmp/ue_mac_nr.pcap",
    "pcap_nas_filename": "/tmp/ue_nas.pcap",
    "usim_mode": "soft",
    "usim_algo": "milenage",
    "usim_opc": "63BFA50EE6523365FF14C1F45F88737D",
    "usim_k": "00112233445566778899aabbccddeeff",
    "usim_imsi": "001010123456789",
    "usim_imei": "353490069873319",
    "rrc_release": 15,
    "rrc_ue_category": 4,
    "nas_apn": "srsapn",
    "nas_apn_protocol": "ipv4",
    "gui_enable": false,
    "gw_ip_devname": "tun_rtue",
    "gw_ip_netmask": "255.255.255.0",
    "general_metrics_influxdb_enable": true,
    "general_metrics_influxdb_url": "influxdb",
    "general_metrics_influxdb_port": 8086,
    "general_metrics_influxdb_org": "rtu",
    "general_metrics_influxdb_token": "605bc59413b7d5457d181ccf20f9fda15693f81b068d70396cc183081b264f3b",
    "general_metrics_influxdb_bucket": "rtusystem",
    "general_metrics_period_secs": 0.5,
    "general_ue_data_identifier": "generic_zmq"
  }
  ```

uu_agent: |
  ### Equipment: Air Interface Monitor (RF Collection Device)
  This configures a software-defined radio to capture raw RF samples for later analysis.
  Standard use case: Recording cellular signals for offline protocol analysis and research.
  
  ### Example response structure:
  ```json
  {
    "id": "String, Example: uuagent_collection_001",
    "rf.type": "String, either 'uhd' or 'zmq', Default: 'uhd'",
    "rf.rx_freq": "Float, receive frequency in Hz (use scientific notation, e.g., 1.84e9)",
    "rf.srate": "Float, sample rate in Hz (standard rates: 15.36e6, 23.04e6, 30.72e6)",
    "rf.rx_gain": "Integer, receiver gain in dB (0-90), Default: 40",
    "rf.tx_gain": "Integer, transmitter gain in dB (0-90), Default: 0 (collection-only)",
    "rf.num_samples": "Integer, number of samples to collect (>0, ≤1,000,000,000), Default: 100000000",
    "rf.iq_file": "String, output file path (must start with '/output/'), Default: '/output/iq_data.fc32'",
    "rf.device_args": "String, hardware-specific arguments, Default: 'type=b200,clock=external'"
  }
  ```

  ### Example Request:
  Configure UU-Agent to collect RF signals at 1.84 GHz using B200 hardware for 5 seconds

  ### Example Response
  ```json
  {
    "id": "uuagent_collection_001",
    "rf.type": "uhd",
    "rf.rx_freq": 1.84e9,
    "rf.srate": 23.04e6,
    "rf.rx_gain": 40,
    "rf.tx_gain": 0,
    "rf.num_samples": 1000000,
    "rf.iq_file": "/output/rf_signals_1840mhz.fc32",
    "rf.device_args": "type=b200,clock=external"
  }
  ```

  ### Example Request:
  Make a basic UU-Agent that uses ZMQ for RF collection at 2.4 GHz

  ### Example Response
  ```json
  {
    "id": "uuagent_zmq_001",
    "rf.type": "zmq",
    "rf.rx_freq": 2.4e9,
    "rf.srate": 23.04e6,
    "rf.rx_gain": 40,
    "rf.tx_gain": 0,
    "rf.num_samples": 20,
    "rf.iq_file": "/output/zmq_samples.fc32",
    "rf.device_args": "tcp://172.22.0.2:2001"
  }
  ```

user_prompt: |
  Start a jammer on B200 to sweep around 3.50 GHz (n78), ~10 MHz bandwidth, moderate power. Include health and logs after start.









# sample jammer test user prompts

# Start a jammer on B200 to sweep around 3.50 GHz (n78), ~10 MHz bandwidth, moderate power. Include health and logs after start.

# Spin up a ZMQ-based jammer targeting 3.55 GHz with 20 MHz bandwidth and 15 MHz sampling. List components, then show health.

# Start a B200 jammer at 2.60 GHz (FR1 high band) with narrow bandwidth and low amplitude; capture logs after start.

# Deploy a jammer at 700 MHz (FR1), B200, bandwidth 5 MHz, sampling 15 MHz, amplitude 0.6; check health and then stop it.

# Create a ZMQ jammer at 2.40 GHz for Wi-Fi interference tests, bandwidth 40 MHz, amplitude 0.9, sample at 80 MHz, then fetch logs.

# Start a B200 jammer at 3.80 GHz, bandwidth 50 MHz, sampling 100 MHz, amplitude 0.7; run health afterwards.

# Launch a jammer at 500 MHz using B200, amplitude 0.5, bandwidth 1 MHz, sampling 5 MHz, 10000 samples; report logs.

# Start a ZMQ jammer at 5.20 GHz with amplitude 0.8 and tx_gain 75; record health.

# Bring up a B200 jammer at 5.50 GHz, bandwidth 20 MHz, num_samples 100000, amplitude 0.3; then get logs.

# Start a ZMQ jammer at 5.90 GHz (upper FR1) with bandwidth 50 MHz, amplitude 0.4, sampling 120 MHz; list components and show health.