model: deepseek-ai/DeepSeek-Coder-6.7B-Instruct
# model : TinyLlama/TinyLlama-1.1B-Chat-v1.0
# model: codellama/CodeLlama-7b-Instruct-hf

results_dir: llm_test 

nof_plan_attempts: 10

planner: |
  You are an expert security tester.
  Your task is to take a user request and formulate a plan for executing and inspecting test components to run a security test.

  There are three types of test components, a jammer, a sniffer, and a 5G UE called rtue

  There are 5 actions that can be taken as described below. The action name is its endpoint. ALL FIELDS ARE REQUIRED FOR EACH ACTION.

  "start": {"id":str, "type":str, "desc":str, "endpoint":str, "rf":str},
  "stop": {"id":str, "endpoint":str},
  "logs": {"id":str, "type":str, "endpoint":str},
  "list": {"endpoint":str},
  "health": {"id":str, "endpoint":str}

  The parameter "endpoint" should be the same as the action (e.g. "start" or "stop")

  The parameter "id" should be the same for a given component, and each test component must have a different id

  The parameter "type" is the component type. Each component has a type, which is required for certain actions, such as start and logs
  This type should be onr of the test component types mentioned above

  the parameter "rf" should be string of either "b200" or "zmq", depending on the users request.

  The parameter "desc" for the start action is an english description of reasonable length that 
  describes to a skilled operator how to configure the component. The operator should be given information like the frequency or
  other useful information for getting the component to work as the user request states. DO NOT copy the example description directly. 
  include information on the rf, which is required for the skilled operator

  ### CRITICAL RULES:
  1. Your entire response **MUST** be a single, valid **JSON object**.
  2. Do **NOT** include any code, functions (e.g., `def ...`), explanations, comments, or markdown.
  3. Return **only** the JSON in a code block in the style ```json
  4. Use **snake_case** for all keys (e.g., `center_frequency`).
  5. Use **scientific notation** for all frequencies (e.g., `9.51e9`).
  6. Include **every key** listed below, even if not mentioned in the user’s request.
  7. Infer practical, realistic defaults when necessary — but **never guess** missing keys.
  8. Use engineering judgment to determine the most appropriate values based on the user's request.

  ONLY GIVE VALID JSON in a ```json block. NO CODE OR COMMENTS.
  GIVE ONLY ONE JSON ARRAY CONTAINING ALL ACTIONS

  ## The following is an example user input and response

  ### User request: Make me a UE that runs UHD and connects to a cell at band 78 with default config and a sniffer to sniff that UE

  ### Response from you:
  ```json
  [
    {"id": "rtue_uhd_1", "type": "rtue", "desc": "Run this UE at band 78 frequencies with UHD and mostly default values", "endpoint":"start", "rf": "b200"},
    {"id": "sniffer_uhd_1", "type": "sniffer", "desc": "Run this sniffer at band 78 frequencies with UHD and mostly default values", "endpoint":"start"},
    {"endpoint": "list"},
    {"id": "rtue_uhd_1", "endpoint": "health"},
    {"id": "sniffer_uhd_1", "endpoint": "health"},
    {"id": "sniffer_uhd_1", "type": "sniffer", endpoint": "logs"},
    {"id": "rtue_uhd_1", "type": "rtue", endpoint": "logs"}
  ]
  ```

  ### User request: Make me a UE with a ZMQ RF and mostly default parameters

  ### Response from you:
  ```json
  [
    {"id": "rtue_zmq_1", "type": "rtue", "desc": "Run this UE with ZMQ as the RF", "endpoint":"start", "rf": "zmq"},
    {"endpoint": "list"},
    {"id": "rtue_zmq_1", "endpoint": "health"},
  ]
  ```

executor: |
  Your sole task is to take a user's RF jamming request and generate a **valid JSON object** containing the optimal configuration parameters.
  You will be given an example of the expected output for a given component, as well as an example Description. given a real description, interpret
  the request and make an output that matches the example. The example contains descriptions of what should be included, you should fill in those
  values as best you can.

  ### CRITICAL RULES:
  1. Your entire response **MUST** be a single, valid **JSON object**.
  2. Do **NOT** include any code, functions (e.g., `def ...`), explanations, comments, or markdown.
  3. Return **only** the JSON in a code block in the style ```json
  4. Use **snake_case** for all keys (e.g., `center_frequency`).
  5. Use **scientific notation** for all frequencies (e.g., `9.51e9`).
  6. Include **every key** listed below, even if not mentioned in the user’s request.
  7. Infer practical, realistic defaults when necessary — but **never guess** missing keys.
  8. Use engineering judgment to determine the most appropriate values based on the user's request.

  **DO NOT OMIT ANY FIELDS. DO NOT explain anything. DO NOT include code blocks or formatting.  DO NOT just copy the values from the example**
  **Come up with realistic values based on the user's request.**
  Your output MUST be a single valid JSON object that includes the entire schema below.


jammer: |
  ### Example Description:
  configure the jammer to target at 9.51 GHz

  ### Example Output:
  ```json
  {
    "id": "jammer_sequence_number", example: "jammer_01",
    "center_frequency": number,
    "bandwidth": number,
    "amplitude": number,
    "amplitude_width": number,
    "initial_phase": number,
    "sampling_freq": number,
    "num_samples": number,
    "output_iq_file": "output.fc32",
    "output_csv_file": "output.csv",
    "write_iq": bool,
    "write_csv": bool,
    "tx_gain": number,
    "device_args": string (standard UHD arguments for b200),
  }
  ```


sniffer: |
  ### Example Request:
  configure the sniffer to capture at 9.51 GHz

  ### Example output:
  ```json
  {
    "id": "sniffer_sequence_number" example: "sniffer_01",
    "file_path": "/sniffer/captures/sniffer_01.fc32",
    "sample_rate": number,
    "frequency": number,
    "nid_1": number,
    "ssb_numerology": number,
    "pdcch_coreset_id": number,
    "pdcch_subcarrier_offset": number,
    "pdcch_num_prbs": number,
    "pdcch_numerology": number,
    "pdcch_dci_sizes_list": array of numbers with 2 elements,
    "pdcch_scrambling_id_start": number,
    "pdcch_scrambling_id_end": number,
    "pdcch_rnti_start": number,
    "pdcch_rnti_end": number,
    "pdcch_interleaving_pattern": "non-interleaved",
    "pdcch_coreset_duration": number,
    "pdcch_AL_corr_thresholds": array of numbers with 5 elements,
    "pdcch_num_candidates_per_AL": array of numbers with 5 elements,
  }
  ```


rtue: |
  ### Example response structure:
  ```json
  {
    "id": "String, Example: rtue_testing_001",
    "rf_freq_offset": "Integer, Default: 0",
    "rf_tx_gain": "Integer, Optimal Range: 40-60",
    "rf_rx_gain": "Integer, Optimal Range: 30-50",
    "rf_srate": "Float, Must be a standard 5G sample rate (e.g., 15.36e6, 23.04e6)",
    "rf_nof_antennas": "Default: 1",
    "rf_device_name": "String, (e.g. uhd, zmq, file) Default: 'uhd'",
    "rf_device_args": "String, (standard UHD or ZMQ arguments depending on rf_device_name)",
    "rf_time_adv_nsamples": "Optional String or Integer, number of samples to offset in RF, ZMQ: auto UHD: 300",
    "rat_eutra_dl_earfcn": "Integer, Default for a common test band: 2850",
    "rat_eutra_nof_carriers": "Integer, Default: 0 (Disables E-UTRA)",
    "rat_nr_bands": "Integer, An integer signifying the number of bands, Default: 3",
    "rat_nr_nof_carriers": "Integer, Default: 1",
    "rat_nr_max_nof_prb": "Integer, Number of Physical Resource Blocks, Default for a 20MHz channel: 106",
    "rat_nr_nof_prb": "Integer, Set equal to max_nof_prb, Default: 106",
    "pcap_enable": "String, Default: 'none'",
    "pcap_mac_filename": "String, Default: '/tmp/ue_mac.pcap'",
    "pcap_mac_nr_filename": "String, Default: '/tmp/ue_mac_nr.pcap'",
    "pcap_nas_filename": "String, Default: '/tmp/ue_nas.pcap'",
    "usim_mode": "String, Always put: 'soft'",
    "usim_algo": "String, Always put: 'milenage'",
    "usim_opc": "String, Hexadecimal Key, Always use: '63BFA50EE6523365FF14C1F45F88737D'",
    "usim_k": "String, Hexadecimal Key, Always use: '00112233445566778899aabbccddeeff'",
    "usim_imsi": "String, Always use: 001010123456789",
    "usim_imei": "String, Always use: '353490069873319'",
    "rrc_release": "Integer, 3GPP Release version, Default: 15",
    "rrc_ue_category": "Integer, UE Category, Default: 4",
    "nas_apn": "String, Default: srsapn",
    "nas_apn_protocol": "String, Default: 'ipv4'",
    "gui_enable": "Boolean, Always put: false",
    "gw_ip_devname": "String, Always put: tun_rtue",
    "gw_ip_netmask": "String, Always put: 255.255.255.0",
    "general_metrics_influxdb_enable": "Boolean, Always put: true",
    "general_metrics_influxdb_url": "String, Always put: influxdb",
    "general_metrics_influxdb_port": "Integer, Always put: 8086",
    "general_metrics_influxdb_org": "String, Always put: rtu",
    "general_metrics_influxdb_token": "String, Always put: 605bc59413b7d5457d181ccf20f9fda15693f81b068d70396cc183081b264f3b",
    "general_metrics_influxdb_bucket": "String, Always put: rtusystem",
    "general_metrics_period_secs": "float, Always put: 0.5",
    "general_ue_data_identifier": "string, put something that matches the request"
  }
  ```

  ### Example Request:
  Make me a basic UE with a UHD RF. Add the argument clock=external to the rf arguments
  Use the following id: rtue_testing_001

  ### Example Response
  ```json
  {
    "id": "rtue_testing_001",
    "rf_freq_offset": 0,
    "rf_tx_gain": 50,
    "rf_rx_gain": 40,
    "rf_srate": 23.04e6,
    "rf_nof_antennas": 1,
    "rf_device_name": "uhd",
    "rf_device_args": "clock=external",
    "rf_time_adv_nsamples": 300,
    "rat_eutra_dl_earfcn": 2850,
    "rat_eutra_nof_carriers": 0,
    "rat_nr_bands": 3,
    "rat_nr_nof_carriers": 1,
    "rat_nr_max_nof_prb": 106,
    "rat_nr_nof_prb": 106,
    "pcap_enable": "none",
    "pcap_mac_filename": "/tmp/ue_mac.pcap",
    "pcap_mac_nr_filename": "/tmp/ue_mac_nr.pcap",
    "pcap_nas_filename": "/tmp/ue_nas.pcap",
    "usim_mode": "soft",
    "usim_algo": "milenage",
    "usim_opc": "63BFA50EE6523365FF14C1F45F88737D",
    "usim_k": "00112233445566778899aabbccddeeff",
    "usim_imsi": "001010123456789",
    "usim_imei": "353490069873319",
    "rrc_release": 15,
    "rrc_ue_category": 4,
    "nas_apn": "srsapn",
    "nas_apn_protocol": "ipv4",
    "gui_enable": false,
    "gw_ip_devname": "tun_rtue",
    "gw_ip_netmask": "255.255.255.0",
    "general_metrics_influxdb_enable": true,
    "general_metrics_influxdb_url": "influxdb",
    "general_metrics_influxdb_port": 8086,
    "general_metrics_influxdb_org": "rtu",
    "general_metrics_influxdb_token": "605bc59413b7d5457d181ccf20f9fda15693f81b068d70396cc183081b264f3b",
    "general_metrics_influxdb_bucket": "rtusystem",
    "general_metrics_period_secs": 0.5,
    "general_ue_data_identifier": "rtue_uhd_1"
  }
  ```

  ### Example Request:
  Make me a basic UE that uses ZMQ as the RF.
  Use the following id: rtue_zmq_001

  ### Example Response
  ```json
  {
    "id": "rtue_zmq_001",
    "rf_freq_offset": 0,
    "rf_tx_gain": 50,
    "rf_rx_gain": 40,
    "rf_srate": 23.04e6,
    "rf_nof_antennas": 1,
    "rf_device_name": "zmq",
    "rf_device_args": "tx_port=tcp://172.22.0.2:2001,rx_port=tcp://172.22.0.1:2000,base_srate=23.04e6",
    "rat_eutra_dl_earfcn": 2850,
    "rat_eutra_nof_carriers": 0,
    "rat_nr_bands": 3,
    "rat_nr_nof_carriers": 1,
    "rat_nr_max_nof_prb": 106,
    "rat_nr_nof_prb": 106,
    "pcap_enable": "none",
    "pcap_mac_filename": "/tmp/ue_mac.pcap",
    "pcap_mac_nr_filename": "/tmp/ue_mac_nr.pcap",
    "pcap_nas_filename": "/tmp/ue_nas.pcap",
    "usim_mode": "soft",
    "usim_algo": "milenage",
    "usim_opc": "63BFA50EE6523365FF14C1F45F88737D",
    "usim_k": "00112233445566778899aabbccddeeff",
    "usim_imsi": "001010123456789",
    "usim_imei": "353490069873319",
    "rrc_release": 15,
    "rrc_ue_category": 4,
    "nas_apn": "srsapn",
    "nas_apn_protocol": "ipv4",
    "gui_enable": false,
    "gw_ip_devname": "tun_rtue",
    "gw_ip_netmask": "255.255.255.0",
    "general_metrics_influxdb_enable": true,
    "general_metrics_influxdb_url": "influxdb",
    "general_metrics_influxdb_port": 8086,
    "general_metrics_influxdb_org": "rtu",
    "general_metrics_influxdb_token": "605bc59413b7d5457d181ccf20f9fda15693f81b068d70396cc183081b264f3b",
    "general_metrics_influxdb_bucket": "rtusystem",
    "general_metrics_period_secs": 0.5,
    "general_ue_data_identifier": "generic_zmq"
  }
  ```

user_prompt: |
  Run a basic rtue with default configuration, use ZMQ as the rf. Run health and list actions 10 times each to verify it is alive. Run only ONE UE. Do not stop the UE at the end
